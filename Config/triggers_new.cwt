###all inside trigger must be true
## scopes = { any }
alias[trigger:and] = replace_me
###at least one entry inside trigger must be true
## scopes = { any }
alias[trigger:or] = replace_me
###negates content of trigger
## scopes = { any }
alias[trigger:not] = replace_me
###Print message to game.log - Can be localized
## scopes = { any }
alias[trigger:log] = replace_me
###checks if scoped unit leader, ace or country is female
## scopes = { COUNTRY UNIT_LEADER ACE }
alias[trigger:is_female] = replace_me
###Compares the current resistance level of a state to a value. Example: resistance > 50 
## scopes = { STATE }
alias[trigger:resistance] = replace_me
###Checks if a country has a captured an operative ( supports scoped variables )has_captured_operative = GER/yes/no
## scopes = { COUNTRY }
alias[trigger:has_captured_operative] = replace_me
###check if a state has enough non damaged buildingsExample:non_damaged_building_level = {	building = arms_factory	level = 5}
## scopes = { STATE }
alias[trigger:non_damaged_building_level] = replace_me
###Checks the number of days since the country last capitulated, even if it is no longer capitulated.	If it has not ever capitulated, the value is extremely large.	It is recommended to combine this with has_capitulated = yes when you specifically want to ignore non-active capitulations.Examples:	HOL = { has_capitulated = yes days_since_capitulated > 60 } # The Netherlands has been capitulated for more than two months	FRA = { has_capitulated = yes days_since_capitulated < 21 } # France has capitulated sometime within the past three weeks	GER = { OR = { has_capitulated = no days_since_capitulated > 14 } } # Germany is not both actively and recently capitulated
## scopes = { COUNTRY }
alias[trigger:days_since_capitulated] = replace_me
###Compares the current compliance level of a state to a value. Example: compliance > 50 
## scopes = { STATE }
alias[trigger:compliance] = replace_me
###Compares the current compliance speed of a state to a value. Example: compliance_speed > 50 
## scopes = { STATE }
alias[trigger:compliance_speed] = replace_me
###Compares the current resistance speed of a state to a value. Example: resistance_speed > 50 
## scopes = { STATE }
alias[trigger:resistance_speed] = replace_me
###compares occupied country that creates resistance to a tag. Example: occupied_country_tag = ITA
## scopes = { STATE }
alias[trigger:occupied_country_tag] = replace_me
###Compares the target resistance level of a state to a value. Example: resistance_target > 50 
## scopes = { STATE }
alias[trigger:resistance_target] = replace_me
###returns true if state has a resistance
## scopes = { STATE }
alias[trigger:has_resistance] = replace_me
###returns true if state has an active resistance (above zero)
## scopes = { STATE }
alias[trigger:has_active_resistance] = replace_me
###compares occupied country that creates resistance to a tag. Example: has_occupation_modifier = modifier_name
## scopes = { STATE }
alias[trigger:has_occupation_modifier] = replace_me
###returns true if game is in debug mode (launched with -debug argument)
## scopes = { any }
alias[trigger:is_debug] = replace_me
###Compares the core (average of all occupied states) compliance value of occupied_country_tag that is occuppied by the country in current scope.Example: core_compliance = {  occupied_country_tag = ITA  value > 35 }
## scopes = { COUNTRY }
alias[trigger:core_compliance] = replace_me
###Compares the core (average of all occupied states) resistance value of occupied_country_tag that is occuppied by the country in current scope.Example:core_resistance = {  occupied_country_tag = ITA  value > 35 }
## scopes = { COUNTRY }
alias[trigger:core_resistance] = replace_me
###checks network strength you have in a country. Examples: # country has a network strength greater than 50% over germanynetwork_strength = {  target = GER value > 50}# country has a network strength greater than 50% over germany in state 53network_strength = {  target = GER state = 53 value > 50}# country has a network strength greater than 50% in state 53, regardless of the targetnetwork_strength = {  state = 53 value > 50}
## scopes = { COUNTRY }
alias[trigger:network_strength] = replace_me
###Checks if a country has a specific token against another countryhas_operation_token = {	tag = GER	token = some_token_id}
## scopes = { COUNTRY }
alias[trigger:has_operation_token] = replace_me
###checks occupation law of state. Example: occupation_law = brutally_oppressive_occupation
## scopes = { STATE }
alias[trigger:occupation_law] = replace_me
###checks if a country is ally with another country. will check if two countries are same/in same faction/has subject master relationExample: is_ally_with = ITA 
## scopes = { COUNTRY }
alias[trigger:is_ally_with] = replace_me
###calculates the highest scored country that is defined in a country scorer and sets it to a variable. Example: get_highest_scored_country_temp = {   scorer = scorer_id   var = var_name # variable name that the result will be stored. default is highest_scored_country }
## scopes = { COUNTRY }
alias[trigger:get_highest_scored_country_temp] = replace_me
###calculates & sorts all countries in a country scorer and stores them and their scores in temp arrays. Example: get_sorted_scored_countries_temp = {   scorer = scorer_id # id that is used in country scorer  array = array_name # a name to store sorted countries as a temp array (default to sorted_country_list)   scores = array_name # corresponding score temp array for countries stored in array (default to country_list_scores) }
## scopes = { COUNTRY }
alias[trigger:get_sorted_scored_countries_temp] = replace_me
###checks decryption ratio against a country. Example: decryption_progress = {  target = GER value > 0.5} #or decryption_progress@GER as variable
## scopes = { COUNTRY }
alias[trigger:decryption_progress] = replace_me
###check if any any occupied meets the trigger. tooltip=key can be defined to override title
## scopes = { COUNTRY }
alias[trigger:any_occupied_country] = {
	alias_name[effect] = alias_match_left[effect]
}

###check if all occupied countries meets the trigger. tooltip=key can be defined to override title
## scopes = { COUNTRY }
alias[trigger:all_occupied_country] = replace_me
###check if any country with current scope's original tag meets the trigger. Example:any_country_with_original_tag = {   original_tag_to_check = ENG # the trigger check all countries that has this original tag   # ... triggers to check }
## scopes = { any }
alias[trigger:any_country_with_original_tag] = {
	alias_name[effect] = alias_match_left[effect]
}

###check if all country with current scope's original tag meets the trigger. Example:all_country_with_original_tag = {   original_tag_to_check = ENG # the trigger check all countries that has this original tag   # ... triggers to check }
## scopes = { any }
alias[trigger:all_country_with_original_tag] = replace_me
###has country done this intelligence agency upgrade (to its highest level)
## scopes = { COUNTRY }
alias[trigger:has_done_agency_upgrade] = replace_me
###check if country is Spy Master
## scopes = { COUNTRY }
alias[trigger:is_spymaster] = replace_me
###check the amount of foreign garrison manpower we have
## scopes = { COUNTRY }
alias[trigger:foreign_manpower] = replace_me
###check the amount of manpower needed by garrisons
## scopes = { COUNTRY }
alias[trigger:garrison_manpower_need] = replace_me
###Checks the number of upgrade done in the intelligence agency. agency_upgrade_number > 4
## scopes = { COUNTRY }
alias[trigger:agency_upgrade_number] = replace_me
###Checks whether the operative is performing the given mission:operative_leader_mission = build_intel_network
## scopes = { UNIT_LEADER }
alias[trigger:operative_leader_mission] = replace_me
###Compare the intel of the scoped country with the specified one:GER = {  # is true if all predicates are satisfied  compare_intel_with = {     target = POL    civilian_intel > 0.5  # GER has at least 0.5 more civ. intel than POL    army_intel = 0  # GER has as much army intel as POL    navy_intel < 0  # POL has more navy intel than GER    # airforce_intel is not specified and thus ignored in the comparison  }}
## scopes = { COUNTRY }
alias[trigger:compare_intel_with] = replace_me
###check if all operatives meets the trigger. tooltip=key can be defined to override title
## scopes = { COUNTRY OPERATION }
alias[trigger:all_operative_leader] = replace_me
###check if any operatives meets the trigger. tooltip=key can be defined to override title
## scopes = { COUNTRY OPERATION }
alias[trigger:any_operative_leader] = {
	alias_name[effect] = alias_match_left[effect]
}

###Checks whether the operative has the matching captured status
## scopes = { UNIT_LEADER }
alias[trigger:is_operative_captured] = replace_me
###Compare the absolute, percentage based, intel level the scoped country has overthe specified one:GER = {  # is true if all predicates are satisfied  intel_level_over = {     target = POL    civilian_intel > 0.5  # GER has more than 50% civ. intel over POL    army_intel = 0  # GER has no army intel over POL    navy_intel > 0  # GER has at least some navy intel over POL    # airforce_intel is not specified and thus ignored in the comparison    # NOTE: since we are comparing the intel level of a country over another,    # checking for values less than 0 does not make sense    # NOTE: since we are comparing percentages, using values greater than 1    # does not make sense.  }}
## scopes = { COUNTRY }
alias[trigger:intel_level_over] = replace_me
###check if any of the states controlled by the scope country meets the trigger. tooltip=key can be defined to override title
## scopes = { COUNTRY }
alias[trigger:any_controlled_state] = {
	alias_name[effect] = alias_match_left[effect]
}

###check if all of the states controlled by the scope country meets the trigger. tooltip=key can be defined to override title
## scopes = { COUNTRY }
alias[trigger:all_controlled_state] = replace_me
###Checks the number of operatives the country controls
## scopes = { COUNTRY }
alias[trigger:num_of_operatives] = replace_me
###Checks the number of available operative slots a country has.If this differs from the number of operative, this does not mean the country can recruit an operative, but that it will eventually be able to.
## scopes = { COUNTRY }
alias[trigger:num_operative_slots] = replace_me
###Checks the number of operative a country can recruit right now.Note that this is not necessarily greater than zero if num_operative_slots returned a number greater than the number of operative.
## scopes = { COUNTRY }
alias[trigger:num_free_operative_slots] = replace_me
###has country an active cryptology department
## scopes = { COUNTRY }
alias[trigger:is_cryptology_department_active] = replace_me
###checks if is currently decrypting a cipher. Example is_decrypting = GER
## scopes = { COUNTRY }
alias[trigger:is_decrypting] = replace_me
###checks if fully decrypted a cipher. Example is_fully_decrypted = GER
## scopes = { COUNTRY }
alias[trigger:is_fully_decrypted] = replace_me
###checks if the country activated their active cipher decryption bonuses. Example is_active_decryption_bonuses_enabled = GER
## scopes = { COUNTRY }
alias[trigger:is_active_decryption_bonuses_enabled] = replace_me
###Will compare towards the amount of fake intel divisions a country has control over. .
## scopes = { COUNTRY }
alias[trigger:num_fake_intel_divisions] = replace_me
###modulos a temp variable with another. Example: modulo_temp_variable = {   var = variable_to_modulo   value = divisior }
## scopes = { any }
alias[trigger:modulo_temp_variable] = replace_me
###check if any country with current scoped country guarantees. Example:any_guaranteed_country = {   # ... triggers to check }
## scopes = { COUNTRY }
alias[trigger:any_guaranteed_country] = {
	alias_name[effect] = alias_match_left[effect]
}

###check if every country with current scoped country guarantees. Example:all_country_with_original_tag = {   # ... triggers to check }
## scopes = { COUNTRY }
alias[trigger:all_guaranteed_country] = replace_me
###Compares number of completed operations.Example: num_finished_operations = {  target = ITA  operation = operation_infiltrate_armed_forces_navy value > 35 }
## scopes = { COUNTRY }
alias[trigger:num_finished_operations] = replace_me
###checks the collaboration in a target country with our currently scoped country. Example: has_collaboration = {  target = GER value > 0.5} #or has_collaboration@GER as variable
## scopes = { COUNTRY }
alias[trigger:has_collaboration] = replace_me
###checks if running a specific operation. operation can be ommitted to check for any operationExample: is_running_operation = {  target = ITA  operation = operation_infiltrate_armed_forces_navy}
## scopes = { COUNTRY }
alias[trigger:is_running_operation] = replace_me
###checks if finished collecting of resources for an operation.Example: has_finished_collecting_for_operation = {  target = ITA  operation = operation_infiltrate_armed_forces_navy}
## scopes = { COUNTRY }
alias[trigger:has_finished_collecting_for_operation] = replace_me
###Checks  conscription ratio of the country compared to target conscription ratio.
## scopes = { COUNTRY }
alias[trigger:conscription_ratio] = replace_me
###Checks the target conscription amount of the country.
## scopes = { COUNTRY }
alias[trigger:target_conscription_amount] = replace_me
###Checks the current conscription amount of the country.
## scopes = { COUNTRY }
alias[trigger:current_conscription_amount] = replace_me
###checks the type of operation
## scopes = { OPERATION }
alias[trigger:is_operation_type] = replace_me
###checks if preparing a specific operation.Example: is_preparing_operation = {  target = ITA  operation = operation_infiltrate_armed_forces_navy}
## scopes = { COUNTRY }
alias[trigger:is_preparing_operation] = replace_me
###Checks whether the operative is performing the given operation:operative_leader_operation = operation_rescue_operative
## scopes = { UNIT_LEADER }
alias[trigger:operative_leader_operation] = replace_me
###checks if the country could potentially declare a war on the target ( according to game rules, relationship, etc... ). Example can_declare_war_on = GER
## scopes = { COUNTRY }
alias[trigger:can_declare_war_on] = replace_me
###Checks whether the operative has the specified nationality.NOTE: this is invalid on non-operatives.Examples:has_nationality = GER
## scopes = { UNIT_LEADER }
alias[trigger:has_nationality] = replace_me
###checks network national coverage you have over a country. Example: network_national_coverage = {  target = GER value > 0.5} 
## scopes = { COUNTRY }
alias[trigger:network_national_coverage] = replace_me
