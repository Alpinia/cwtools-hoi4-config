types = {
    type[containerWindowType] = {
        path = "game/interface"
        name_field = "name"
        path_extension = .gui
        skip_root_key = guiTypes
    }
}

containerWindowType = {
    name = scalar
    ## cardinality = 0..1
    ### Mouse Draggable
    moveable = bool
    ## cardinality = 0..1
    ### Origin of position field
    orientation = enum[containerOrientations]
    ## cardinality = 0..1
    ### Will remove elements outside of size bounding box
    clipping = bool
    ## cardinality = 0..1
    fullscreen = bool
    ## cardinality = 0..inf
    ### Background texture
    background = {
        name = scalar
        alias_name[gui_standard] = alias_match_left[gui_standard]
        alias_name[gui_image] = alias_match_left[gui_image]
    }
    alias_name[gui] = alias_match_left[gui]
    alias_name[gui_standard] = alias_match_left[gui_standard]
    alias_name[gui_animation] = alias_match_left[gui_animation]
    alias_name[gui_sound] = alias_match_left[gui_sound]
    ## cardinality = 0..1
    verticalScrollbar = enum[scrollbar_types]
    ## cardinality = 0..1
    horizontalScrollbar = enum[horizontal_scrollbar_types]
    ## cardinality = 0..1
    drag_scroll = {
        ## cardinality = 0..inf
        enum[dragScrollType]
    }
    ## cardinality = 0..1
    click_to_front = bool
}
#Container Window
alias[gui:containerWindowType] = {
    name = scalar
    ## cardinality = 0..1
    ### Mouse Draggable
    moveable = bool
    ## cardinality = 0..1
    ### Origin of position field
    orientation = enum[containerOrientations]
    ## cardinality = 0..1
    ### Will remove elements outside of size bounding box
    clipping = bool
    ## cardinality = 0..1
    fullscreen = bool
    ## cardinality = 0..inf
    ### Background texture
    background = {
        name = scalar
        alias_name[gui_standard] = alias_match_left[gui_standard]
        alias_name[gui_image] = alias_match_left[gui_image]
    }
    alias_name[gui] = alias_match_left[gui]
    alias_name[gui_standard] = alias_match_left[gui_standard]
    alias_name[gui_animation] = alias_match_left[gui_animation]
    alias_name[gui_sound] = alias_match_left[gui_sound]
    ## cardinality = 0..1
    verticalScrollbar = enum[scrollbar_types]
    ## cardinality = 0..1
    horizontalScrollbar = enum[horizontal_scrollbar_types]
    ## cardinality = 0..1
    drag_scroll = {
        ## cardinality = 0..inf
        enum[dragScrollType]
    }
    ## cardinality = 0..1
    click_to_front = bool
}
alias[gui:buttonType] = {
    name = scalar
    ## cardinality = 0..1
    ### Special size version for buttons
    size = {
        x = int
        y = int
    }
    alias_name[gui_standard] = alias_match_left[gui_standard]
    alias_name[gui_image] = alias_match_left[gui_image]
    ## cardinality = 0..1
    buttonText = localisation
    ## cardinality = 0..1
    buttonFont = scalar
    alias_name[gui_localization] = alias_match_left[gui_localization]
    ## cardinality = 0..1
    shortcut = scalar
    ## cardinality = 0..1
    hint_tag = localization
    alias_name[gui_sound] = alias_match_left[gui_sound]
    ## cardinality = 0..1
    format = enum[guiTextFormats]
    ## cardinality = 0..1
    multiline = bool
    ## cardinality = 0..1
    font = scalar
}
### Dynamic List
alias[gui:gridboxtype] = {
    ### Name referenced by scripted gui
    name = scalar
    alias_name[gui_standard] = alias_match_left[gui_standard]
    ### Dimensions of slot, does not clip entries
    slotsize = {
        width = int
        width = percentage_field
        height = int
        height = percentage_field
    }
    ### Adds entries horizontally
    ## cardinality = 0..1
    add_horizontal = bool
    ## cardinality = 0..1
    ### Maximum number of horizontal slots if adding horizontally
    max_slots_horizontal = int
    ## cardinality = 0..1
    ### Maximum number of vertical slots if adding horizontally
    max_slots_vertical = int
    ## cardinality = 0..1
    format = enum[containerOrientations]
}
alias[gui:iconType] = {
    ### Name referenced by scripted gui
    name = scalar
    ##cardinality = ~1..1
    alias_name[any_image_type] = alias_match_left[any_image_type]
    alias_name[gui_image] = alias_match_left[gui_image]
    alias_name[gui_standard] = alias_match_left[gui_standard]
    alias_name[gui_localization] = alias_match_left[gui_localization]
}
alias[gui:instantTextBoxType] = {
    ### Name referenced by scripted gui
    name = scalar
    text = localisation
    ## cardinality = 0..1
    font = scalar
    ## cardinality = 0..1
    maxWidth = int
    ## cardinality = 0..1
    maxHeight = int
    ## cardinality = 0..1
    format = enum[guiTextFormats]
    ## cardinality = 0..1
    multiline = bool
    alias_name[gui_standard] = alias_match_left[gui_standard]
    alias_name[gui_localization] = alias_match_left[gui_localization]
    ## cardinality = 0..1
    alwaystransparent = bool
    ## cardinality = 0..1
    #DEBUG
    ### Pixel Border
    borderSize = { x = int y = int }
    ## cardinality = 0..1
    #DEBUG
    ### Missing Descriptiion, need testing
    textureFile = <spriteType>
    ## cardinality = 0..1
    #DEBUG
    ### Vertical alignement in text box
    vertical_alignment = enum[guiTextFormatsVertical]
    ## cardinality = 0..1
    #DEBUG
    ### Text box only scroll bar
    scrollbartype = enum[scrollbar_types]
    ## cardinality = 0..1
    fixedsize = bool
    ## cardinality = 0..1
    text_color_code = scalar
    ## cardinality = 0..1
    truncate = bool
}
### Checkbox
alias[gui:checkboxType] = {
    name = scalar
    alias_name[gui_standard] = alias_match_left[gui_standard]
    alias_name[gui_image] = alias_match_left[gui_image]
}
#GUI Standard Functions
### Position of element. Absolute in px, % of screen, or % of parent.
alias[gui_standard:position] = {
    x = int
    x = percentage_field
    y = int
    y = percentage_field
}
### Size of element. Absolute in px, % of screen, or % of parent.
alias[gui_standard:size] = {
    width = int
    width = percentage_field
    height = int
    height = percentage_field
}
alias[gui_standard:margin] = {
    ## cardinality = 0..1
    top = int
    ## cardinality = 0..1
    bottom = int
    ## cardinality = 0..1
    left = int
    ## cardinality = 0..1
    right = int
}
alias[gui_standard:scale] = float
alias[gui_standard:rotation] = float
### Orientation of window in parent
alias[gui_standard:orientation] = enum[containerOrientations]
### Origin of window
alias[gui_standard:origo] = enum[containerOrigo]
### Hide element
alias[gui_standard:hide] = bool
### Increments of vertical scroll
alias[gui_standard:vertical_scroll_step] = int

#GUI Image
### Sprite for image
alias[gui_image:spriteType] = <spriteType>
### Tiliing Sprite
alias[gui_image:quadTextureSprite] = <spriteType>
### Image Sprite
single_alias[gui_image:any_image_type] = {
    alias_name[gui_image:spriteType] = alias_match_left[gui_image:spriteType]
    alias_name[gui_image:quadTextureSprite] = alias_match_left[gui_image:quadTextureSprite]
}
### Allows clickthrough
alias[gui_image:alwaystransparent] = bool
### Frame of image
alias[gui_image:frame] = int
### Sets image origin to center
alias[gui_image:centerposition] = bool

#GUI Localization
alias[gui_localization:pdx_tooltip] = localisation
alias[gui_localization:pdx_tooltip_delayed] = localisation
### PDX function, use pdx_tooltip instead
alias[gui_localization:tooltip] = localisation
### Text ontop of elements
alias[gui_localization:text] = localisation


#GUI Animation
### Position before animation in pixels
alias[gui_animation:show_position] = {
    x = int
    x = percentage_field
    y = int
    y = percentage_field
}
### Position returned to when hiding
alias[gui_animation:hide_position] = {
    x = int
    x = percentage_field
    y = int
    y = percentage_field
}
alias[gui_animation:show_animation_type] = decelerated
alias[gui_animation:hide_animation_type] = { accelerated linear }
alias[gui_animation:animation_time] = int
alias[gui_animation:fade_time] = int
alias[gui_animation:fade_type] = linear

# GUI Sound
alias[gui_sound:upsound] = scalar
alias[gui_sound:downsound] = scalar
alias[gui_sound:show_sound] = scalar
alias[gui_sound:hide_sound] = scalar
alias[gui_sound:clicksound] = scalar
alias[gui_sound:oversound] = scalar

enums = {
    enum[containerOrientations] = {
        CENTER
        UPPER_LEFT
        LOWER_LEFT
        UPPER_RIGHT
        LOWER_RIGHT
        RIGHT
        LEFT
        UP
        DOWN
    }
    enum[containerOrigo] = {
        center
        center_up
        center_down
        lower_left
        lower_right
        upper_right
        upper_left
        right
        left
    }
    enum[dragScrollType] = {
        left
        middle
        right
    }
    enum[guiTextFormats] = {
        left
        right
        center
        centre
    }
    enum[guiTextFormatsVertical] = {
        center
        up
        down
    }
    complex_enum[horizontal_scrollbar_types] = {
        path = "game/interface"
        name = {
            extendedScrollbarType = {
                name = enum_name
                horizontal = yes
            }
            scrollbarType = {
                name = enum_name
                horizontal = yes
            }
        }
    }
    complex_enum[scrollbar_types] = {
        path = "game/interface"
        name = {
            extendedScrollbarType = {
                name = enum_name
            }
            scrollbarType = {
                name = enum_name
            }
        }
    }
}