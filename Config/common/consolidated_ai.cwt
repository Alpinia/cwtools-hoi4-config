types = {
	type[ai_area] = {
		path = "game/common/ai_areas"
		skip_root_key = areas
	}
	type[ai_focus] = {
		path = "game/common/ai_focuses"
		subtype[research] = {
			research = {

			}
		}
		subtype[national_focuses] = {
			ai_national_focuses = {

			}
		}
	}
	type[ai_peace] = {
		path = "game/common/ai_peace"
	}
	type[ai_template] = {
		path = "game/common/ai_templates"
	}
	type[ai_equipment_design_group] = {
		path = "game/common/ai_equipment"
	}
}

ai_area = {
	## cardinality = 0..1
	continents = {
		enum[continents]
	}
	## cardinality = 0..1
	strategic_regions = {
		## cardinality = 1..inf
		<strategic_region>
	}
}

ai_focus = {
	subtype[research] = {
		research = {
			## cardinality = 0..inf
			enum[ai_research_areas] = float
			## cardinality = 0..inf
			enum[tech_category] = float
		}
	}
	subtype[national_focuses] = {
		ai_national_focuses = {
			## cardinality = 1..inf
			<focus>
			## cardinality = 0..inf
			<shared_focus>
		}
	}

}

## replace_scope = { this = country root = country from = country }
ai_peace = {
	enable = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	annex_randomness = int
	liberate_randomness = int
	puppet_randomness = int
	take_states_randomness = int
	force_government_randomness = int

	## cardinality = 0..1
	build_temp_vars = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	# ROOT = Taker, FROM = Giver
	annex = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	# ROOT = Taker, FROM = Liberated
	liberate = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	# ROOT = Taker, FROM = Giver
	puppet = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	# ROOT = Taker, FROM = Giver
	puppet_all = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## replace_scope = { this = state root = state from = country fromfrom = country}
	# ROOT = STATE, FROM = Taker, FROM.FROM = Giver
	puppet_state = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## replace_scope = { this = country root = country from = state }
	# ROOT = Taker, FROM = State
	take_states = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	# ROOT = Taker, FROM = Giver
	force_government = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
}

ai_template = {
	roles = {
		value_set[ai_roles]
	}
	# Restricts the template to only the specified tags. Optional.
	## cardinality = 0..1
	available_for = {
		## cardinality = 1..inf
		enum[country_tags]
	}

	# Blocks the template for the specified tags. Optional.
	## cardinality = 0..1
	blocked_for = {
		## cardinality = 0..inf
		enum[country_tags]
	}

	match_to_count = float

	upgrade_prio = {
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
	## cardinality = 1..10
	scalar = {
		upgrade_prio = {
			enum[base_factor] = float
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}
		## cardinality = 0..1
		production_prio = {
			enum[base_factor] = float
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}
		## cardinality = 0..1
		can_upgrade_in_field = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## cardinality = 0..1
		custom_icon = int
		## cardinality = 0..1
		reinforce_prio = int

		target_width = float
		width_weight = float
		column_swap_factor = float

		stat_weights = {
			## cardinality = 26..26
			float
			#<float> #-- default_morale
			#<float> #-- defense
			#<float> #-- breakthrough
			#<float> #-- hardness
			#<float> #-- soft_attack
			#<float> #-- hard_attack
			#<float> #-- recon
			#<float> #-- entrenchment
			#<float> #-- initiative
			#<float> #-- casualty_trickleback
			#<float> #-- supply_consumption_factor
			#<float> #-- supply_consumption
			#<float> #-- suppression
			#<float> #-- suppression_factor
			#<float> #-- experience_loss_factor
			#<float> #-- equipment_capture_factor

			#-- Air Values
			#<float> #-- air_attack

			#-- Common Values
			#<float> #-- max_organisation
			#<float> #-- max_strength
			#<float> #-- maximum_speed
			#<float> #-- armor_value
			#<float> #-- ap_attack
			#<float> #-- reliability
			#<float> #-- reliability_factor
			#<float> #-- weight
			#<float> #-- build_cost_ic
		}
		target_template = {
			weight = float
			match_value = float

			regiments = {
				## cardinality = 1..25
				<unit> = int
			}
			## cardinality = 0..1
			support = {
				## cardinality = 0..5
				<unit> = int
			}
		}
		allowed_types = {
			## cardinality = 1..inf
			<unit>
		}
		## cardinality = 0..1
		replace_at_match = float
		## cardinality = 0..1
		replace_with = enum[ai_templates]
		## cardinality = 0..1
		target_min_match = float
	}
}

ai_equipment_design_group = {
	# Only category = naval is currently supported, starting with version 1.6.0
	category = enum[equipment_categories]

	# Blocks the template for the specified tags. Optional.
	## cardinality = 0..1
	blocked_for = {
		## cardinality = 0..inf
		enum[country_tags]
	}

	# Restricts the template to only the specified tags. Optional.
	## cardinality = 0..1
	available_for = {
		## cardinality = 1..inf
		enum[country_tags]
	}

	roles = {
		value_set[ai_roles]
	}

	priority = {
		## cardinality = 0..1
		enum[base_factor] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## cardinality = 1..10
	enum[ai_equipment_design] = {
		priority = {
			## cardinality = 0..1
			enum[base_factor] = float
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}

		role_icon_index = int

		enable = {
			alias_name[trigger] = alias_match_left[trigger]
		}

		target_variant = {
			match_value = float

			type = <equipment>

			# modules = {
			# }
		}
	}
}

enums = {
	enum[ai_research_areas] = {
		defensive
		offensive
		#unit types?
		carrier
		battleship
		cruiser
	}
	complex_enum[ai_templates] = {
		path = "game/common/ai_templates"
		name = {
			enum_name = {
				target_template = {
				}
			}
		}
	}
	complex_enum[ai_equipment_design] = {
		path = "game/common/ai_equipment"
		name = {
			enum_name = {
				target_variant = {
				}
			}
		}
	}
}
